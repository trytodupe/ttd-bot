name: Build and push Docker image on tag (docker compose)

on:
  push:
    tags:
      - 'v*'
      - 'V*'

env:
  IMAGE_NAME: trytodupe/ttd-bot
  COMPOSE_FILE: docker-compose.yml

concurrency:
  group: docker-publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image with Docker Compose
        run: docker compose -f "${{ env.COMPOSE_FILE }}" build

      - name: Tag and push images
        env:
          TAG_NAME: ${{ github.ref_name }}
        shell: bash
        run: |
          set -euo pipefail
          # Extract source image name from docker-compose.yml (first 'image:' line)
          SOURCE_IMAGE=$(grep -E '^[[:space:]]*image:' "${COMPOSE_FILE}" | head -n1 | awk '{print $2}' | tr -d '"')
          if [[ -z "${SOURCE_IMAGE}" ]]; then
            echo "Failed to extract image from ${COMPOSE_FILE}. Ensure services.nonebot.image is set." >&2
            exit 1
          fi

          # If the image has a tag, split it; otherwise assume ':latest'
          if [[ "${SOURCE_IMAGE}" == *:* ]]; then
            IMAGE_BASE="${SOURCE_IMAGE%%:*}"
            SOURCE_TAG="${SOURCE_IMAGE##*:}"
          else
            IMAGE_BASE="${SOURCE_IMAGE}"
            SOURCE_TAG="latest"
          fi

          SOURCE_TAG_FULL="${IMAGE_BASE}:${SOURCE_TAG}"
          echo "Using built image: ${SOURCE_TAG_FULL}"
          docker image inspect "${SOURCE_TAG_FULL}" >/dev/null 2>&1 || {
            echo "Image ${SOURCE_TAG_FULL} not found after build. Check docker-compose.yml image tag or build step." >&2
            exit 1
          }

          # Normalize tag (strip leading 'v' for secondary tag without 'v')
          TARGET_TAG_V="${IMAGE_BASE}:${TAG_NAME}"
          TARGET_TAG_NV="${IMAGE_BASE}:${TAG_NAME#v}"

          for TARGET in "${TARGET_TAG_V}"; do
            echo "Tagging ${SOURCE_TAG_FULL} -> ${TARGET}"
            docker tag "${SOURCE_TAG_FULL}" "${TARGET}"
            echo "Pushing ${TARGET}"
            docker push "${TARGET}"
          done

          # If the tag looks like a semver (with or without 'v'), also publish non-v variant and latest
          if [[ "${TAG_NAME}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            if [[ "${TARGET_TAG_NV}" != "${TARGET_TAG_V}" ]]; then
              echo "Also pushing non-v tag: ${TARGET_TAG_NV}"
              docker tag "${SOURCE_TAG_FULL}" "${TARGET_TAG_NV}"
              docker push "${TARGET_TAG_NV}"
            fi
            LATEST_TAG="${IMAGE_BASE}:latest"
            echo "Tagging ${SOURCE_TAG_FULL} -> ${LATEST_TAG}"
            docker tag "${SOURCE_TAG_FULL}" "${LATEST_TAG}"
            echo "Pushing ${LATEST_TAG}"
            docker push "${LATEST_TAG}"
          fi
